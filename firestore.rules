rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { 
      return request.auth != null; 
    }
    
    function isMember(listId) {
      return isAuthed() &&
        exists(/databases/$(database)/documents/lists/$(listId)/members/$(request.auth.uid));
    }
    
    function role(listId) {
      return get(/databases/$(database)/documents/lists/$(listId)/members/$(request.auth.uid)).data.role;
    }

    // User documents
    match /users/{uid} {
      allow read, write: if isAuthed() && request.auth.uid == uid;
    }

    // List documents
    match /lists/{listId} {
      allow create: if isAuthed() && request.auth.uid == request.resource.data.createdBy;
      allow read: if isMember(listId);
      allow update, delete: if isMember(listId) && role(listId) in ['owner','editor'];
    }

    // List members
    match /lists/{listId}/members/{uid} {
      allow read: if isMember(listId);
      // Allow user to create their own member document (for list creation)
      allow create: if isAuthed() && request.auth.uid == uid;
      // Only owners can update/delete members
      allow update, delete: if isMember(listId) && role(listId) == 'owner';
    }

    // List items
    match /lists/{listId}/items/{itemId} {
      allow read: if isMember(listId);
      allow create, update, delete: if isMember(listId);
    }

    // Invites
    match /invites/{inviteId} {
      // Anyone authenticated can read invites to check if they exist
      allow read: if isAuthed();
      
      // Only list owners can create invites
      allow create: if isAuthed() 
        && request.resource.data.listId is string
        && exists(/databases/$(database)/documents/lists/$(request.resource.data.listId)/members/$(request.auth.uid))
        && get(/databases/$(database)/documents/lists/$(request.resource.data.listId)/members/$(request.auth.uid)).data.role == 'owner';
      
      // Only the creator can delete invites (cleanup)
      allow delete: if isAuthed() && resource.data.createdBy == request.auth.uid;
    }
  }
}